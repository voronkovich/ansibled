#!/usr/bin/env bash

set -euo pipefail
shopt -s lastpipe nullglob dotglob

declare -r app_name="${0##*/}"
declare -r XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"

main() {
    declare -a config_files=()
    declare -A config=(
        [ANSIBLED_IMAGE]='willhallonline/ansible:alpine'
        [ANSIBLED_WORKDIR]='/ansible'
        [ANSIBLED_SSH_PRIVATE_KEY]="$(default_ssh_private_key)"
        [ANSIBLED_SSH_KNOWN_HOSTS]="$(default_ssh_known_hosts)"
        [ANSIBLED_SSH_AUTH_SOCK]="$(default_ssh_auth_socket)"
        [ANSIBLED_RUNTIME]="$(default_runtime)"
        [ANSIBLED_OPTS]=''
        [ANSIBLED_DEBUG]=0
    )

    load_config

    declare -a opts=(
        '--rm' '-it'
        '--workdir' "${config[ANSIBLED_WORKDIR]}"
        '-v' "$(pwd):${config[ANSIBLED_WORKDIR]}"
    )

    if [[ -n "${config[ANSIBLED_SSH_PRIVATE_KEY]}" ]]; then
        opts+=('-v' "${config[ANSIBLED_SSH_PRIVATE_KEY]}:/root/.ssh/identity:ro")
    fi

    if [[ -n "${config[ANSIBLED_SSH_KNOWN_HOSTS]}" ]]; then
        opts+=('-v' "${config[ANSIBLED_SSH_KNOWN_HOSTS]}:/root/.ssh/known_hosts:rw")
    fi

    if [[ -n "${config[ANSIBLED_SSH_AUTH_SOCK]}" ]]; then
        opts+=(
            '-v' "${config[ANSIBLED_SSH_AUTH_SOCK]}:${config[ANSIBLED_SSH_AUTH_SOCK]}"
            '-e' "SSH_AUTH_SOCK=${config[ANSIBLED_SSH_AUTH_SOCK]}"
        )
    fi

    for config_file in "${config_files[@]}"; do
        opts+=('--env-file' "${config_file}")
    done

    for env in $(compgen -e ANSIBLE_); do
        opts+=('-e' "${env}=${!env}")
    done

    if [[ -n "${config[ANSIBLED_OPTS]}" ]]; then
        opts+=(${config[ANSIBLED_OPTS]})
    fi

    declare -r cmd="${config[ANSIBLED_RUNTIME]}"
    declare image="${config[ANSIBLED_IMAGE]}"

    if [[ "${cmd}" == "podman" ]] && [[ "${image}" != *"://"* ]]; then
        image="docker://${image}"
    fi

    if [[ $# == 0 ]]; then
        set -- sh
    fi

    debug "$@"

    "${cmd}" run "${opts[@]}" "${image}" "$@"
}

load_config() {
    declare -r user_config_file="$(find_user_config)"
    if [[ -n "${user_config_file}" ]]; then
        config_files+=("${user_config_file}")
    fi

    declare -r local_config_file="$(find_local_config)"
    if [[ -n "${local_config_file}" ]]; then
        config_files+=("${local_config_file}")

        if [[ -f "${local_config_file}.local" ]]; then
            config_files+=("${local_config_file}.local")
        fi
    fi

    for config_file in "${config_files[@]}"; do
        load_config_file "${config_file}"
    done

    for env in $(compgen -e ANSIBLED_); do
        config["${env}"]="${!env}"
    done

    declare -a required=(
        ANSIBLED_RUNTIME
        ANSIBLED_IMAGE
        ANSIBLED_WORKDIR
    )

    for option in "${required[@]}"; do
        if [[ -z "${config[${option}]}" ]]; then
            error "${option} is required."
        fi
    done
}

find_user_config() {
    if [[ -f "${XDG_CONFIG_HOME}/ansibled" ]]; then
        echo "${XDG_CONFIG_HOME}/ansibled"
        return 0
    fi

    if [[ -f "${HOME}/.ansibled" ]]; then
        echo "${HOME}/.ansibled"
        return 0
    fi

    return 1
}

find_local_config() {
    declare dir="${PWD}"

    while [[ -n "${dir}" ]]; do
        if [[ "${dir}" == '/' || "${dir}" == "${HOME}" ]]; then
            break
        fi

        if [[ -f "${dir}/.ansibled" ]]; then
            echo "${dir}/.ansibled"
            return 0
        fi

        dir="${dir%/*}"
    done

    return 1
}

load_config_file() {
    declare -r config_file="${1:-/dev/stdin}"

    while IFS=$'=' read -r key val; do
        if ! [[ "${key}" == ANSIBLED_* ]]; then
            continue
        fi

        case "${key}" in
        ANSIBLED_IMAGE) ;;
        ANSIBLED_WORKDIR) ;;
        ANSIBLED_SSH_PRIVATE_KEY) ;;
        ANSIBLED_SSH_KNOWN_HOSTS) ;;
        ANSIBLED_SSH_AUTH_SOCK) ;;
        ANSIBLED_RUNTIME) ;;
        ANSIBLED_OPTS) ;;
        ANSIBLED_DEBUG) ;;
        *)
            error "Unknown option '${key}' in '${config_file}'"
            ;;
        esac

        config["${key}"]="${val}"
    done <"${config_file}"
}

default_ssh_private_key() {
    if [[ -f "${HOME}/.ssh/id_ed25519" ]]; then
        echo "${HOME}/.ssh/id_ed25519"
    elif [[ -f "${HOME}/.ssh/id_ed25519_sk" ]]; then
        echo "${HOME}/.ssh/id_ed25519_sk"
    elif [[ -f "${HOME}/.ssh/id_ecdsa" ]]; then
        echo "${HOME}/.ssh/id_ecdsa"
    elif [[ -f "${HOME}/.ssh/id_ecdsa_sk" ]]; then
        echo "${HOME}/.ssh/id_ecdsa_sk"
    elif [[ -f "${HOME}/.ssh/id_rsa" ]]; then
        echo "${HOME}/.ssh/id_rsa"
    elif [[ -f "${HOME}/.ssh/id_dsa" ]]; then
        echo "${HOME}/.ssh/id_dsa"
    elif [[ -f "${HOME}/.ssh/identity" ]]; then
        echo "${HOME}/.ssh/identity"
    else
        return 1
    fi
}

default_ssh_auth_socket() {
    if [[ -S "${SSH_AUTH_SOCK}" ]]; then
        echo "${SSH_AUTH_SOCK}"
    elif [[ -S '/run/host-services/ssh-auth.sock' ]]; then
        echo '/run/host-services/ssh-auth.sock'
    else
        return 1
    fi
}

default_runtime() {
    if command -v docker >/dev/null 2>&1; then
        echo 'docker'
    elif command -v podman >/dev/null 2>&1; then
        echo 'podman'
    elif command -v nerdctl >/dev/null 2>&1; then
        echo 'nerdctl'
    else
        return 1
    fi
}

default_ssh_known_hosts() {
    if [[ -f "${HOME}/.ssh/known_hosts" ]]; then
        echo "${HOME}/.ssh/known_hosts"
    else
        return 1
    fi
}

debug() {
    if [[ "${config[ANSIBLED_DEBUG]:-0}" != 1 ]]; then
        return
    fi

    echo -n $'\nConfiguration files:'
    if [[ ${#config_files[@]} == 0 ]]; then
        echo ' ~'
    else
        echo $'\n'
    fi
    for config_file in "${config_files[@]}"; do
        echo "  ${config_file}"
    done
    echo $'\nConfiguration:\n'
    for key in "${!config[@]}"; do
        echo "  ${key}=${config[${key}]}"
    done
    echo
    echo "${cmd}" run "${opts[@]}" "${image}" "$@"
    exit
} >&2

error() {
    printf "${app_name}${app_name:+ }ERROR: %s\n" "$@" >&2

    exit 1
}

main "$@"
